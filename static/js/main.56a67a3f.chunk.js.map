{"version":3,"sources":["DoubleSlider.js","PlotRegion.js","GeneratePlotData.js","SandboxControls.js","App.js","serviceWorker.js","index.js"],"names":["valuetext","value","DoubleSlider","this","props","min_value","max_value","Slider","min","max","onChange","event","newValue","sliderChanged","console","log","valueLabelDisplay","aria-labelledby","getAriaValueText","React","Component","PlotRegion","w","window","innerWidth","h","innerHeight","plotly_layout","plotly_data","data","layout","frames","plotly_frames","config","plotly_config","revision","plotly_revision","onInitialized","figure","setState","onUpdate","GeneratePlotData","xvals","yvals","xmin","xmax","ret","x_val","push","toString","x_index","parseInt","yvals_index","length","getTrace1","getTrace2","uid","meta","columnNames","x","y","mode","name","type","xsrc","getXvalues","ysrc","getYvalues","xbins","end","size","start","marker","line","color","nbinsx","histfunc","cumulative","enabled","transforms","target","operation","targetsrc","legendgroup","orientation","hovertemplate","xaxis","dtick","range","tick0","ticks","showline","tickfont","family","tickmode","autorange","tickangle","automargin","showspikes","tickformat","tickprefix","rangeslider","yaxis","visible","showexponent","exponentformat","spikethickness","bargap","autosize","template","bar","colorbar","outlinewidth","table","cells","fill","header","carpet","aaxis","gridcolor","linecolor","endlinecolor","minorgridcolor","startlinecolor","baxis","mesh3d","contour","autocolorscale","heatmap","scatter","surface","heatmapgl","histogram","parcoords","scatter3d","scattergl","choropleth","scattergeo","histogram2d","scatterpolar","contourcarpet","scattercarpet","scattermapbox","scatterpolargl","scatterternary","histogram2dcontour","geo","bgcolor","showland","lakecolor","landcolor","showlakes","subunitcolor","font","polar","radialaxis","angularaxis","scene","gridwidth","zerolinecolor","showbackground","backgroundcolor","zaxis","title","zerolinewidth","ternary","caxis","colorway","hovermode","colorscale","diverging","sequential","sequentialminus","plot_bgcolor","paper_bgcolor","shapedefaults","width","opacity","fillcolor","annotationdefaults","arrowhead","arrowcolor","arrowwidth","themeRef","bargroupgap","library","add","faChartLine","list_of_regions","list_of_states","axios","require","SandboxControls","nca_data_index","selected_loc","selected_var","state","var_select_options","var_select_disabled","loc_sub_select_options","loc_sub_select_disabled","slider_min_value","slider_max_value","cached_data","region","varible","region_sub","_loaded","bind","values","region_select","document","getElementById","var_select","region_sub_select","updatePlotData","region_select_value","charAt","toUpperCase","slice","className","icon","id","locationSelectChanged","disabled","variableSelectChanged","style","locationSubSelectChanged","get","then","response","populateVariableSelect","catch","error","Object","keys","loadNCAdata","region_options","map","item","index","key","state_options","loc_value","data_subset","lines","split","headers","trim","col_index","undefined","i","elements","xval","yval","parseFloat","plot_data","setXRange","getData","getLayout","filename","xy_values","parseNCAFile","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.56a67a3f.chunk.js","sourcesContent":["import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\n\nfunction valuetext(value) {\n  return value;\n}\n\nclass DoubleSlider extends React.Component {\n  render(){\n    const value = [ this.props.min_value, this.props.max_value ];\n\n    const handleChange = (event, newValue) => {\n        this.props.sliderChanged(newValue);\n        console.log(\"handleChange=\"+newValue)\n    };\n    return (\n        <Slider\n            min={1900}\n            max={2018}\n            value={value}\n            onChange={handleChange}\n            valueLabelDisplay=\"auto\"\n            aria-labelledby=\"range-slider\"\n            getAriaValueText={valuetext}\n        />\n    );\n  }\n}\n\nexport default DoubleSlider;\n\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\n\nclass PlotRegion extends React.Component {\n    render() {\n        // Automaticly resize plot\n        let w = window.innerWidth - 48;\n        let h = window.innerHeight - 210;\n        this.props.plotly_layout['width'] = w;\n        this.props.plotly_layout['height'] = h;\n\n        console.log(\"Rendering PlotRegion this.state.plotly_data=\")\n        console.log(this.props.plotly_data)\n\n        return (\n            <Plot\n                data={this.props.plotly_data}\n                layout={this.props.plotly_layout}\n                frames={this.props.plotly_frames}\n                config={this.props.plotly_config}\n                revision={this.props.plotly_revision}\n                onInitialized={(figure) => this.setState(figure)}\n                onUpdate={(figure) => this.setState(figure)}\n            />\n        );\n    }\n}\n\nexport default PlotRegion;\n","\n\n\n\n\nclass GeneratePlotData {\n    constructor(xvals, yvals){\n        this.xmin = 1900;\n        this.xmax = 2018;\n        this.xvals = xvals;\n        this.yvals = yvals;\n\n    }\n    \n    setXRange(xmin, xmax){\n        this.xmin = xmin;\n        this.xmax = xmax;\n    }\n\n    getXvalues(){\n        let ret = [];\n        for(let x_val=this.xmin; x_val <= this.xmax; x_val++){\n            ret.push(x_val.toString());\n        }\n        console.log('GeneratePlotData.getXvalues()');\n        console.log(ret);\n        return ret;\n    }\n\n\n    getYvalues(){\n        let ret = [];\n        let x_index = this.xmin;\n        while(x_index < parseInt(this.xvals[0])){ // requested range below data range\n            x_index++;\n            ret.push('0');  // should this be undef/NaN? How does plotly handle it?\n        }\n        let yvals_index=0;\n        while(x_index <= parseInt(this.xvals[this.xvals.length-1])){ // data\n            x_index++;\n            ret.push(this.yvals[yvals_index++]);\n        }\n        while(x_index <= this.xmax){ //requested range above data range\n            x_index++;\n            ret.push('0');\n        }\n        console.log('GeneratePlotData.getYvalues()');\n        console.log(ret);\n        return ret;\n//        return ['0.571', '0.457', '0.753', '0.872', '0.875', '1.575', '0.64', '0.821', '0.904', '0.862', '0.899', '0.59', '1.026', '0.781', '1.653', '0.643', '0.897', '0.849', '0.418', '0.944', '0.608', '0.974', '0.74', '0.977', '0.412', '0.633', '0.79', '1.302', '0.514', '1.373', '0.461', '0.894', '0.536', '0.727', '0.996', '1.044', '0.685', '0.814', '0.3', '0.917', '1.201', '0.699', '0.705', '0.561', '0.894', '1.415', '1.699', '0.483', '1.263', '1.861', '0.448', '0.442', '0.508', '1.369', '1.054', '1.06', '1.412', '0.417', '0.851', '0.827', '1.463', '0.875', '0.582', '0.672', '0.988', '1.036', '1.547', '0.825', '1.929'].slice(this.xmin-1950, this.xmax-1950);\n    }\n\n\n    getData(){\n        return [this.getTrace1(), this.getTrace2()]\n    }\n\n\n    getTrace1(){\n        return {\n          uid: '1883be', \n          meta: {columnNames: {\n              x: 'Year', \n              y: 'NC'\n            }}, \n          mode: 'lines', \n          name: 'Precip', \n          type: 'histogram', \n          xsrc: 'dmichels:4:3b282f', \n          x: this.getXvalues(), \n          ysrc: 'dmichels:4:060bbe', \n          y: this.getYvalues(), \n          xbins: {\n            end: this.xmax, \n            size: 5, \n            start:this.xmin \n          }, \n          marker: {\n            line: {color: 'rgb(88, 179, 171)'}, \n            color: 'rgb(88, 179, 171)'\n          }, \n          nbinsx: 0, \n          histfunc: 'avg', \n          cumulative: {enabled: false}, \n          transforms: [\n            {\n              meta: {columnNames: {target: 'Year'}}, \n              type: 'filter', \n              value: [this.xmin.toString(), this.xmax.toString()], \n              operation: '[]', \n              targetsrc: 'dmichels:4:3b282f', \n              target: this.getXvalues(), \n            }\n          ], \n          legendgroup: 1, \n          orientation: 'v', \n          hovertemplate: ''\n        };\n}   \n    getTrace2(){\n        return {\n          uid: '5b1527', \n          meta: {columnNames: {\n              x: 'Year', \n              y: 'NC'\n            }}, \n          mode: 'markers+lines', \n          name: 'Annual Precip', \n          type: 'scatter', \n          xsrc: 'dmichels:4:3b282f', \n          x: this.getXvalues(), \n          ysrc: 'dmichels:4:060bbe', \n          y: this.getYvalues(), \n          marker: {color: 'rgb(0, 0, 0)'}, \n          transforms: [\n            {\n              meta: {columnNames: {target: 'Year'}}, \n              type: 'filter', \n              value: [this.xmin.toString(), this.xmax.toString()], \n              operation: '[]', \n              targetsrc: 'dmichels:4:3b282f', \n              target: this.getXvalues() \n            }\n          ]\n        };\n\n    }\n\n    getLayout(){ \n        return {\n          xaxis: {\n            type: 'linear', \n            dtick: 5, \n            range: [this.xmin, this.xmax], \n            tick0: 0, \n            ticks: '', \n            showline: false, \n            tickfont: {family: 'Roboto'}, \n            tickmode: 'linear', \n            autorange: false, \n            tickangle: 90, \n            automargin: true, \n            showspikes: false, \n            tickformat: '', \n            tickprefix: '', \n            rangeslider: {\n              range: [1967.1226295828067, 2020.8773704171933], \n              yaxis: [0, 2.053037694013304], \n              visible: false, \n              autorange: true\n            }, \n            showexponent: 'all', \n            exponentformat: 'none', \n            spikethickness: 4\n          }, \n          yaxis: {\n            type: 'linear', \n            range: [0, 2.053037694013304], \n            ticks: '', \n            autorange: true, \n            showspikes: false\n          }, \n          bargap: 0.28, \n          autosize: true, \n          template: {\n            data: {\n              bar: [\n                {\n                  type: 'bar', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              table: [\n                {\n                  type: 'table', \n                  cells: {\n                    fill: {color: '#EBF0F8'}, \n                    line: {color: 'white'}\n                  }, \n                  header: {\n                    fill: {color: '#C8D4E3'}, \n                    line: {color: 'white'}\n                  }\n                }\n              ], \n              carpet: [\n                {\n                  type: 'carpet', \n                  aaxis: {\n                    gridcolor: '#C8D4E3', \n                    linecolor: '#C8D4E3', \n                    endlinecolor: '#2a3f5f', \n                    minorgridcolor: '#C8D4E3', \n                    startlinecolor: '#2a3f5f'\n                  }, \n                  baxis: {\n                    gridcolor: '#C8D4E3', \n                    linecolor: '#C8D4E3', \n                    endlinecolor: '#2a3f5f', \n                    minorgridcolor: '#C8D4E3', \n                    startlinecolor: '#2a3f5f'\n                  }\n                }\n              ], \n              mesh3d: [\n                {\n                  type: 'mesh3d', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              contour: [\n                {\n                  type: 'contour', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }, \n                  autocolorscale: true\n                }\n              ], \n              heatmap: [\n                {\n                  type: 'heatmap', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }, \n                  autocolorscale: true\n                }\n              ], \n              scatter: [\n                {\n                  type: 'scatter', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              surface: [\n                {\n                  type: 'surface', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              heatmapgl: [\n                {\n                  type: 'heatmapgl', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              histogram: [\n                {\n                  type: 'histogram', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              parcoords: [\n                {\n                  line: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}, \n                  type: 'parcoords'\n                }\n              ], \n              scatter3d: [\n                {\n                  type: 'scatter3d', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              scattergl: [\n                {\n                  type: 'scattergl', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              choropleth: [\n                {\n                  type: 'choropleth', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              scattergeo: [\n                {\n                  type: 'scattergeo', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              histogram2d: [\n                {\n                  type: 'histogram2d', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }, \n                  autocolorscale: true\n                }\n              ], \n              scatterpolar: [\n                {\n                  type: 'scatterpolar', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              contourcarpet: [\n                {\n                  type: 'contourcarpet', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              scattercarpet: [\n                {\n                  type: 'scattercarpet', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              scattermapbox: [\n                {\n                  type: 'scattermapbox', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              scatterpolargl: [\n                {\n                  type: 'scatterpolargl', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              scatterternary: [\n                {\n                  type: 'scatterternary', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              histogram2dcontour: [\n                {\n                  type: 'histogram2dcontour', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }, \n                  autocolorscale: true\n                }\n              ]\n            }, \n            layout: {\n              geo: {\n                bgcolor: 'white', \n                showland: true, \n                lakecolor: 'white', \n                landcolor: 'white', \n                showlakes: true, \n                subunitcolor: '#C8D4E3'\n              }, \n              font: {color: '#2a3f5f'}, \n              polar: {\n                bgcolor: 'white', \n                radialaxis: {\n                  ticks: '', \n                  gridcolor: '#EBF0F8', \n                  linecolor: '#EBF0F8'\n                }, \n                angularaxis: {\n                  ticks: '', \n                  gridcolor: '#EBF0F8', \n                  linecolor: '#EBF0F8'\n                }\n              }, \n              scene: {\n                xaxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  gridwidth: 2, \n                  linecolor: '#EBF0F8', \n                  zerolinecolor: '#EBF0F8', \n                  showbackground: true, \n                  backgroundcolor: 'white'\n                }, \n                yaxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  gridwidth: 2, \n                  linecolor: '#EBF0F8', \n                  zerolinecolor: '#EBF0F8', \n                  showbackground: true, \n                  backgroundcolor: 'white'\n                }, \n                zaxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  gridwidth: 2, \n                  linecolor: '#EBF0F8', \n                  zerolinecolor: '#EBF0F8', \n                  showbackground: true, \n                  backgroundcolor: 'white'\n                }\n              }, \n              title: {x: 0.05}, \n              xaxis: {\n                ticks: '', \n                gridcolor: '#EBF0F8', \n                linecolor: '#EBF0F8', \n                automargin: true, \n                zerolinecolor: '#EBF0F8', \n                zerolinewidth: 2\n              }, \n              yaxis: {\n                ticks: '', \n                gridcolor: '#EBF0F8', \n                linecolor: '#EBF0F8', \n                automargin: true, \n                zerolinecolor: '#EBF0F8', \n                zerolinewidth: 2\n              }, \n              ternary: {\n                aaxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  linecolor: '#A2B1C6'\n                }, \n                baxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  linecolor: '#A2B1C6'\n                }, \n                caxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  linecolor: '#A2B1C6'\n                }, \n                bgcolor: 'white'\n              }, \n              colorway: ['#636efa', '#EF553B', '#00cc96', '#ab63fa', '#19d3f3', '#e763fa', '#fecb52', '#ffa15a', '#ff6692', '#b6e880'], \n              hovermode: 'closest', \n              colorscale: {\n                diverging: [['0', '#8e0152'], ['0.1', '#c51b7d'], ['0.2', '#de77ae'], ['0.3', '#f1b6da'], ['0.4', '#fde0ef'], ['0.5', '#f7f7f7'], ['0.6', '#e6f5d0'], ['0.7', '#b8e186'], ['0.8', '#7fbc41'], ['0.9', '#4d9221'], ['1', '#276419']], \n                sequential: [['0', '#0508b8'], ['0.0893854748603352', '#1910d8'], ['0.1787709497206704', '#3c19f0'], ['0.2681564245810056', '#6b1cfb'], ['0.3575418994413408', '#981cfd'], ['0.44692737430167595', '#bf1cfd'], ['0.5363128491620112', '#dd2bfd'], ['0.6256983240223464', '#f246fe'], ['0.7150837988826816', '#fc67fd'], ['0.8044692737430168', '#fe88fc'], ['0.8938547486033519', '#fea5fd'], ['0.9832402234636871', '#febefe'], ['1', '#fec3fe']], \n                sequentialminus: [['0', '#0508b8'], ['0.0893854748603352', '#1910d8'], ['0.1787709497206704', '#3c19f0'], ['0.2681564245810056', '#6b1cfb'], ['0.3575418994413408', '#981cfd'], ['0.44692737430167595', '#bf1cfd'], ['0.5363128491620112', '#dd2bfd'], ['0.6256983240223464', '#f246fe'], ['0.7150837988826816', '#fc67fd'], ['0.8044692737430168', '#fe88fc'], ['0.8938547486033519', '#fea5fd'], ['0.9832402234636871', '#febefe'], ['1', '#fec3fe']]\n              }, \n              plot_bgcolor: 'white', \n              paper_bgcolor: 'white', \n              shapedefaults: {\n                line: {width: 0}, \n                opacity: 0.4, \n                fillcolor: '#506784'\n              }, \n              annotationdefaults: {\n                arrowhead: 0, \n                arrowcolor: '#506784', \n                arrowwidth: 1\n              }\n            }, \n            themeRef: 'PLOTLY_WHITE'\n          }, \n          bargroupgap: 0, \n          plot_bgcolor: 'rgb(251, 252, 254)', \n          paper_bgcolor: 'rgb(251, 252, 254)'\n        };\n    }\n\n}\n\n\nexport default GeneratePlotData;\n","import React from 'react';\n//import chart_icon from './Sandbox_chart_icon.png'\nimport './App.css';\nimport DoubleSlider from './DoubleSlider.js'\nimport PlotRegion from './PlotRegion.js'\nimport GeneratePlotData from './GeneratePlotData.js'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faChartLine } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faChartLine);\n\n\n\n\n\nconst list_of_regions = [ \"Northeast\",\"Southeast\",\"Midwest\",\"Northern Great Plains\",\n    \"Northwest\",\"Southwest\",\"Southern Great Plains\",\"Alaska\",\"Hawaii\",\"Puerto Rico\" ];\nconst list_of_states = [ \"AL\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\"ID\",\n    \"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\n    \"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\n    \"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\",\"AK\",\n    \"HI\",\"PR\",\"VI\"];\n\n\n\n\nconst axios = require('axios');\n\n\nclass SandboxControls extends React.Component {\n    constructor(props) {\n        super(props)\n        console.log(\"SandboxControls object instantated.\");\n        this.name = \"SandBoxControls\"\n        this.nca_data_index = {};\n        this.selected_loc = \"\";\n        this.selected_var = \"\";\n        this.state = {\n            plotly_data: [], plotly_layout: {}, plotly_frames: [], plotly_config: {}, \n            plotly_revision: 0,\n            var_select_options : [],\n            var_select_disabled : true,\n            loc_sub_select_options : [],\n            loc_sub_select_disabled : true,\n            slider_min_value: 1900,\n            slider_max_value: 2018,\n            cached_data: {\n                           xvals: [],\n                           yvals: {},\n                           region: \"\",\n                           varible: \"\",\n                           region_sub: \"\",\n                           _loaded: false\n                         }\n\n        }\n        this.sliderChanged = this.sliderChanged.bind(this);\n\n    }\n\n    sliderChanged(values){\n        console.log('SanboxControls.sliderChanged(values='+values+')');\n        if(values.length && values.length === 2){\n            console.log('slider_min_value='+values[0]+' slider_max_value='+values[1]);\n            this.setState({\n                slider_min_value: values[0],\n                slider_max_value: values[1],\n            });\n\n            let region_select =  document.getElementById(\"loc_region_select\");\n            let var_select =  document.getElementById(\"var_select\");\n            let region_sub_select =  document.getElementById(\"loc_sub_select\");\n            if(region_select.value === \"national\"){\n                if(var_select && var_select.value !== \"\"){\n                    this.updatePlotData();\n                }\n            }else if(region_select.value === \"region\" || region_select.value === \"state\"){\n                if(var_select && var_select.value !== \"\" &&\n                   region_sub_select && region_sub_select.value !== \"\"){\n                    this.updatePlotData();\n                }\n            }\n        }\n    }\n\n    render(){\n        console.log(\"Rendering SandboxControls this.state=\")\n        console.log(this.state)\n        let region_select =  document.getElementById(\"loc_region_select\");\n        let region_select_value = \" -- \";\n        if(region_select && region_select.value !== \"\" && region_select.value !== \"national\"){\n            //region_select_value = region_select.value;\n            // capitalize\n            region_select_value = region_select.value.charAt(0).toUpperCase() + region_select.value.slice(1);\n        }\n        return (\n            <div className=\"sandbox_controls\">\n                <div className=\"sandbox_header\" >\n                    <FontAwesomeIcon icon={[\"fas\", \"chart-line\"]}\n                        color=\"#666666\"\n                        size=\"2x\"\n                    />\n                    <span>NCA Sandbox - Climate Chart</span>\n                </div>\n                <div className=\"sandbox_selectors\">\n                    <select id=\"loc_region_select\" onChange={()=>this.locationSelectChanged()}>\n                        <option className=\"no_select\" value=\"\">Location/Region</option>\n                        <option value=\"national\">National</option>\n                        <option value=\"region\">Regional</option>\n                        <option value=\"state\">State</option>\n                    </select>\n                    <select id=\"var_select\" disabled={this.state.var_select_disabled} onChange={()=>this.variableSelectChanged()}>\n                        <option className=\"no_select\" value=\"\">Climate variable</option>;\n                        {this.state.var_select_options}\n                    </select>\n                    <select style={{width: \"170px\"}} id=\"loc_sub_select\" disabled={this.state.loc_sub_select_disabled} onChange={()=>this.locationSubSelectChanged()}>\n                        <option className=\"no_select\" value=\"\">{ region_select_value }</option>\n                        {this.state.loc_sub_select_options}\n                    </select>\n                </div>\n                \n                <div className=\"sandbox_slider_outerbox\">\n                    <div className=\"sandbox_slider_center\">\n                        <div className=\"sandbox_slider_left_top\"> Start Year/Period </div>\n                        <div className=\"sandbox_slider_left_bottom\" id=\"start_year\">{this.state.slider_min_value}</div>\n\n                        <div className=\"sandbox_double_slider_container\">\n                            <DoubleSlider \n                                sliderChanged={this.sliderChanged}\n                                min_value={this.state.slider_min_value}\n                                max_value={this.state.slider_max_value}\n                            />\n                        </div>\n\n                        <div className=\"sandbox_slider_right_top\"> End Year/Period </div>\n                        <div className=\"sandbox_slider_right_bottom\" id=\"end_year\">{this.state.slider_max_value}</div>\n                    </div>\n                </div>\n                <div  className=\"plot_region\">\n                    <PlotRegion\n                        plotly_data={this.state.plotly_data} \n                        plotly_layout={this.state.plotly_layout} \n                        plotly_frames={this.state.plotly_frames} \n                        plotly_config={this.state.plotly_config} \n                        plotly_revision={this.state.plotly_revision}\n                    />\n                </div>\n\n            </div>\n        );\n    }\n\n    // This function loads the 'index.json' file into 'this.nca_data_index'\n    // Then it calls \"this.populateVariableSelect()\"\n    // This is only called when the 'Location/Region' selector is changed\n    // and the json data has not been loaded yet\n    loadNCAdata(){\n        \n        axios.get(\"./TSU_Sandbox_Datafiles/index.json\")\n          .then( (response)=>{\n            // handle success\n            console.log('SanboxControls.loadNCADdata() response='+response);\n            console.log(response);\n            //\n            //this.nca_data = JSON.parse(response);\n            this.nca_data_index = response.data;\n\n            // finally call function to process data\n            this.populateVariableSelect();\n          })\n          .catch((error)=>{\n            // handle error\n            console.log('SanboxControls.loadNCADdata() error='+error);\n          })\n          //.then(function () {\n            // always executed\n          //});\n\n\n    }\n\n    // Gets called when 'Location/Region' selector is changed\n    locationSelectChanged(){\n        console.log('SanboxControls.locationSelectChanged()');\n        let region_select =  document.getElementById(\"loc_region_select\");\n        let var_select =  document.getElementById(\"var_select\");\n        console.log('region_select.value = ' + region_select.value);\n        // clear it out\n        // populate from data\n        if( Object.keys(this.nca_data_index).length > 0){\n            // data already loaded, proceed synchronously\n            this.populateVariableSelect();\n        }else{\n            // load data, then call 'this.populateVariableSelect' asynchronously\n            this.loadNCAdata();\n        }\n        console.log(\"region_select.value=\"+region_select.value)\n        if(region_select.value === \"\"){\n            this.setState((state)=>({\n                    plotly_data: [],\n                    plotly_layout: {},\n                    plotly_revision: state.plotly_revision+1,\n                    var_select_options : [],\n                    var_select_disabled : true,\n                    loc_sub_select_options : [],\n                    loc_sub_select_disabled : true,\n            }));\n        }else if(region_select.value === \"national\"){\n            if(var_select && var_select.value !== \"\"){\n                this.updatePlotData();\n                this.setState((state)=>({\n                        loc_sub_select_options : [],\n                        loc_sub_select_disabled : true,\n                }));\n            }else{\n                // no value, clear plot\n                this.setState((state)=>({\n                        plotly_data: [],\n                        plotly_layout: {},\n                        plotly_revision: state.plotly_revision+1,\n                        loc_sub_select_options : [],\n                        loc_sub_select_disabled : true,\n                }));\n            }\n        }else if(region_select.value === \"region\"){\n            let region_options = list_of_regions.map((item,index)=>\n                <option key={\"region_select_options\"+index} value={item}>{item}</option>\n                );\n            console.log('region_options');\n            console.log(region_options);\n            this.setState((state)=>({\n                    plotly_data: [],\n                    plotly_layout: {},\n                    plotly_revision: state.plotly_revision+1,\n                    loc_sub_select_options : region_options,\n                    loc_sub_select_disabled : false,\n            }));\n        }else if(region_select.value === \"state\"){\n            let state_options = list_of_states.map((item,index)=>\n                <option key={\"region_select_options\"+index} value={item}>{item}</option>\n                );\n            console.log('state_options');\n            console.log(state_options);\n            this.setState((state)=>({\n                    plotly_data: [],\n                    plotly_layout: {},\n                    plotly_revision: state.plotly_revision+1,\n                    loc_sub_select_options : state_options,\n                    loc_sub_select_disabled : false,\n            }));\n        }\n    }\n\n\n    // Put all the optios in the 'Climate Varible' selector, based on the 'Location/Region'\n    // selector\n    populateVariableSelect(){\n        console.log('SanboxControls.populateVariableSelect()');\n        let region_select =  document.getElementById(\"loc_region_select\");\n        let loc_value = region_select.value;\n        if(loc_value === \"region\"){ loc_value=\"regions\";} //TODO: fix\n        this.selected_loc = loc_value;\n        console.log('loc_value='+loc_value);\n        console.log('nca_data_index=');\n        console.log(this.nca_data_index);\n        let data_subset = this.nca_data_index[loc_value];\n        console.log('data_subset=');\n        console.log(data_subset);\n        if(data_subset){\n            this.setState({\n                var_select_options: data_subset.map((item,index)=>\n                    <option key={\"var_select_option\"+index} value={item.name}>{item.type}</option>\n                ),\n                var_select_disabled: false\n            });\n        }else{\n            this.setState({\n                var_select_options: [],\n                var_select_disabled: true\n            });\n        }\n        \n    }\n\n    parseNCAFile(data, type, region){\n        let xvals = [];\n        let yvals = [];\n        let lines = data.split(/\\r?\\n/);\n        let headers = lines[0].split(',');\n        console.log('headers='+headers);\n        for(let h=0;h<headers.length;h++){\n            headers[h] = headers[h].trim();\n        }\n        let col_index = undefined;\n        if(type === \"national\"){\n            col_index = 1;\n        }else if(type === \"region\" || type === \"state\"){\n            for(let h=1;h<headers.length;h+=2){\n                if(headers[h] === region){\n                    col_index = h;\n                    break;\n                }\n            }\n        }\n        console.log('region='+region);\n        console.log('col_index='+col_index);\n\n        for(let i=1;i<lines.length;i++){\n            console.log('lines['+i+']='+lines[i]);\n            let elements = lines[i].split(',');\n            console.log('elements.length='+elements.length);\n            if(elements.length <= 1){\n                break;\n            }\n            let xval = parseInt(elements[0]);\n            let yval = parseFloat(elements[col_index]);\n            console.log('xval='+xval+' yval='+yval);\n            xvals.push(xval);\n            yvals.push(yval);\n        }\n\n\n        return [xvals, yvals];\n    }\n\n    updatePlotData(){\n        let region_select =  document.getElementById(\"loc_region_select\");\n        let var_select =  document.getElementById(\"var_select\");\n        let region_sub_select =  document.getElementById(\"loc_sub_select\");\n        if(region_select.value === \"\"){\n            return;\n        }\n        console.log('SanboxControls.updatePlotData()');\n        console.log('region_select='+region_select.value);\n        console.log('var_select='+var_select.value);\n        console.log('region_sub_select='+region_sub_select.value);\n\n\n        if( this.state.cached_data._loaded && \n            (region_select.value === this.state.cached_data.region) &&\n            (var_select.value === this.state.cached_data.varible) &&\n            (region_sub_select.value === this.state.cached_data.region_sub) ){\n            // use cached data\n            console.log('Using Cached data');\n            let plot_data = new GeneratePlotData(this.state.cached_data.xvals,\n                                                 this.state.cached_data.yvals);\n            plot_data.setXRange(this.state.slider_min_value, this.state.slider_max_value);\n\n            this.setState((state)=>({\n                plotly_revision: state.plotly_revision+1,\n                plotly_data: plot_data.getData(), \n                plotly_layout: plot_data.getLayout()\n            }));\n        }else{\n            // fetch .txt data from the server, parse, add to cache\n            //let filename = \"./TSU_Sandbox_Datafiles/national1inch_1900_2018_Sandbox.txt\"\n            let filename = \"./TSU_Sandbox_Datafiles/\"+var_select.value;\n            console.log('fetching file from server. filename='+filename);\n            axios.get(filename)\n                .then( (response)=>{\n                        console.log('SanboxControls.updatePlotData() response=');\n                        console.log(response);\n                        let xy_values = this.parseNCAFile(response.data, region_select.value,\n                                                                region_sub_select.value); \n                        let xvals = xy_values[0];\n                        let yvals = xy_values[1];\n\n                        let plot_data = new GeneratePlotData(xvals, yvals);\n                        plot_data.setXRange(this.state.slider_min_value, this.state.slider_max_value);\n\n                        this.setState((state)=>({\n                            cached_data: {\n                                _loaded: true,\n                                xvals: xvals,\n                                yvals: yvals,\n                                region: region_select.value,\n                                varible: var_select.value,\n                                region_sub: region_sub_select.value\n                            },\n                            plotly_revision: state.plotly_revision+1,\n                            plotly_data: plot_data.getData(), \n                            plotly_layout: plot_data.getLayout()\n                        }));\n\n                    })\n                .catch( (error)=>{\n                        console.log('SanboxControls.updatePlotData() error='+error)\n                    })\n\n        }\n    }\n\n\n    variableSelectChanged(){\n        console.log('SanboxControls.variableSelectChanged()');\n        let region_select =  document.getElementById(\"loc_region_select\");\n        let var_select =  document.getElementById(\"var_select\");\n        let region_sub_select =  document.getElementById(\"loc_sub_select\");\n\n\n        if(!var_select || var_select.value === \"\"){\n            // no value, clear plot\n            this.setState((state)=>({\n                    plotly_data: [],\n                    plotly_layout: {},\n                    plotly_revision: state.plotly_revision+1,\n            }));\n        } else if(region_select.value === \"national\"){\n            this.updatePlotData();\n        }else if(region_select.value === \"region\"){\n            if(region_sub_select && region_sub_select.value !== \"\"){\n                this.updatePlotData();\n            }else{\n                // no value, clear plot\n                this.setState((state)=>({\n                        plotly_data: [],\n                        plotly_layout: {},\n                        plotly_revision: state.plotly_revision+1,\n                }));\n            }\n        }else if(region_select.value === \"state\"){\n            if(region_sub_select && region_sub_select.value !== \"\"){\n                this.updatePlotData();\n            }else{\n                // no value, clear plot\n                this.setState((state)=>({\n                        plotly_data: [],\n                        plotly_layout: {},\n                        plotly_revision: state.plotly_revision+1,\n                }));\n            }\n        }\n    }\n\n    // Get called with the 3rd selector is changed\n    locationSubSelectChanged(){\n        console.log('SanboxControls.locationSubSelectChanged()');\n        let region_select =  document.getElementById(\"loc_region_select\");\n        let var_select =  document.getElementById(\"var_select\");\n        let region_sub_select =  document.getElementById(\"loc_sub_select\");\n\n        if(!region_sub_select || region_sub_select.value === \"\"){\n            // no value, clear plot\n            this.setState((state)=>({\n                    plotly_data: [],\n                    plotly_layout: {},\n                    plotly_revision: state.plotly_revision+1,\n            }));\n        //} else if(region_select.value === \"national\"){\n        //    this.updatePlotData();\n        }else if(region_select.value === \"region\"){\n            if(var_select && var_select.value !== \"\"){\n                this.updatePlotData();\n            }else{\n                // no value, clear plot\n                this.setState((state)=>({\n                        plotly_data: [],\n                        plotly_layout: {},\n                        plotly_revision: state.plotly_revision+1,\n                }));\n            }\n        }else if(region_select.value === \"state\"){\n            if(var_select && var_select.value !== \"\"){\n                this.updatePlotData();\n            }else{\n                // no value, clear plot\n                this.setState((state)=>({\n                        plotly_data: [],\n                        plotly_layout: {},\n                        plotly_revision: state.plotly_revision+1,\n                }));\n            }\n        }\n    }\n\n\n\n\n\n\n}\n\nexport default SandboxControls;\n","import React from 'react';\nimport './App.css';\nimport SandboxControls from './SandboxControls.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SandboxControls />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}