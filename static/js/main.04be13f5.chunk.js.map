{"version":3,"sources":["DoubleSlider.js","PlotRegion.js","GeneratePlotData.js","SandboxControls.js","App.js","serviceWorker.js","index.js"],"names":["valuetext","value","DoubleSlider","this","props","min_value","max_value","Slider","min","max","onChange","event","newValue","sliderChanged","console","log","valueLabelDisplay","aria-labelledby","getAriaValueText","React","Component","PlotRegion","name","window","addEventListener","handleResize","plotly_height","plotly_width","plotly_layout","plotly_revision","plotly_data","id","className","data","layout","frames","plotly_frames","config","plotly_config","revision","onInitialized","figure","setState","onUpdate","GeneratePlotData","xvals","yvals","xmin","xmax","ret","x_val","push","toString","x_index","parseInt","yvals_index","length","getTrace1","getTrace2","uid","meta","columnNames","x","y","mode","type","xsrc","getXvalues","ysrc","getYvalues","xbins","end","size","start","marker","line","color","nbinsx","histfunc","cumulative","enabled","transforms","target","operation","targetsrc","legendgroup","orientation","hovertemplate","xaxis","dtick","range","tick0","ticks","showline","tickfont","family","tickmode","autorange","tickangle","automargin","showspikes","tickformat","tickprefix","rangeslider","yaxis","visible","showexponent","exponentformat","spikethickness","bargap","autosize","template","bar","colorbar","outlinewidth","table","cells","fill","header","carpet","aaxis","gridcolor","linecolor","endlinecolor","minorgridcolor","startlinecolor","baxis","mesh3d","contour","autocolorscale","heatmap","scatter","surface","heatmapgl","histogram","parcoords","scatter3d","scattergl","choropleth","scattergeo","histogram2d","scatterpolar","contourcarpet","scattercarpet","scattermapbox","scatterpolargl","scatterternary","histogram2dcontour","geo","bgcolor","showland","lakecolor","landcolor","showlakes","subunitcolor","font","polar","radialaxis","angularaxis","scene","gridwidth","zerolinecolor","showbackground","backgroundcolor","zaxis","title","zerolinewidth","ternary","caxis","colorway","hovermode","colorscale","diverging","sequential","sequentialminus","plot_bgcolor","paper_bgcolor","shapedefaults","width","opacity","fillcolor","annotationdefaults","arrowhead","arrowcolor","arrowwidth","themeRef","bargroupgap","library","add","faChartLine","list_of_regions","list_of_states","axios","require","SandboxControls","loadNCAdata","w","innerWidth","h","innerHeight","nca_data_index","selected_var","region_sub_select_options","region_sub_select_disabled","var_select_options","var_select_disabled","state","region_select_value","undefined","region_sub_select_value","var_select_value","slider_min_value","slider_max_value","RobustDatasetCheckboxChecked","cached_data","region","varible","region_sub","_loaded","bind","RobustDatasetCheckboxChanged","PlotRegionResize","region_select","document","getElementById","charAt","toUpperCase","slice","populateSubSelect","populateVariableSelect","updatePlotData","icon","loc_select_value","regionSelectChanged","style","disabled","regionSubSelectChanged","variableSelectChanged","FormControlLabel","marginLeft","control","Checkbox","checked","label","region_options","map","item","index","key","state_options","robustData","loc_value","var_select","var_selected_text","selectedIndex","innerHTML","data_subset","i","opt","get","then","response","catch","error","lines","split","headers","trim","col_index","elements","xval","yval","parseFloat","plot_data","setXRange","getData","getLayout","isNaN","filename","xy_values","parseNCAFile","values","region_sub_select","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.04be13f5.chunk.js","sourcesContent":["import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\n\nfunction valuetext(value) {\n  return value;\n}\n\nclass DoubleSlider extends React.Component {\n  render(){\n    const value = [ this.props.min_value, this.props.max_value ];\n\n    const handleChange = (event, newValue) => {\n        this.props.sliderChanged(newValue);\n        console.log(\"handleChange=\"+newValue)\n    };\n    return (\n        <Slider\n            min={1900}\n            max={2018}\n            value={value}\n            onChange={handleChange}\n            valueLabelDisplay=\"auto\"\n            aria-labelledby=\"range-slider\"\n            getAriaValueText={valuetext}\n        />\n    );\n  }\n}\n\nexport default DoubleSlider;\n\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\n\nclass PlotRegion extends React.Component {\n    constructor(props) {\n        super(props)\n        console.log(\"PlotRegion object instantated.\");\n        this.name = \"PlotRegion\"\n        window.addEventListener('resize', props.handleResize);\n        props.handleResize();\n\n    }\n\n    render() {\n        console.log(\"PlotRegion render() height=\"+this.props.plotly_height+\" width=\"+this.props.plotly_width);\n        // Automaticly resize plot\n        this.props.plotly_layout['width'] = this.props.plotly_width;\n        this.props.plotly_layout['height'] = this.props.plotly_height;\n\n        console.log(\"Rendering PlotRegion rev=\"+this.props.plotly_revision+\" this.props.plotly_data=\")\n        console.log(this.props.plotly_data)\n\n        return (\n            <div id=\"plot_region\" className=\"plot_region\">\n                <Plot\n                    data={this.props.plotly_data}\n                    layout={this.props.plotly_layout}\n                    frames={this.props.plotly_frames}\n                    config={this.props.plotly_config}\n                    revision={this.props.plotly_revision}\n                    onInitialized={(figure) => this.setState(figure)}\n                    onUpdate={(figure) => this.setState(figure)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default PlotRegion;\n","\n\n\n\n\nclass GeneratePlotData {\n    constructor(xvals, yvals){\n        this.xmin = 1900;\n        this.xmax = 2018;\n        this.xvals = xvals;\n        this.yvals = yvals;\n\n    }\n    \n    setXRange(xmin, xmax){\n        this.xmin = xmin;\n        this.xmax = xmax;\n    }\n\n    getXvalues(){\n        let ret = [];\n        for(let x_val=this.xmin; x_val <= this.xmax; x_val++){\n            ret.push(x_val.toString());\n        }\n        console.log('GeneratePlotData.getXvalues()');\n        console.log(ret);\n        return ret;\n    }\n\n\n    getYvalues(){\n        let ret = [];\n        let x_index = this.xmin;\n        while(x_index < parseInt(this.xvals[0])){ // requested range below data range\n            x_index++;\n            ret.push('0');  // should this be undef/NaN? How does plotly handle it?\n        }\n        let yvals_index=0;\n        while(x_index <= parseInt(this.xvals[this.xvals.length-1])){ // data\n            x_index++;\n            ret.push(this.yvals[yvals_index++]);\n        }\n        while(x_index <= this.xmax){ //requested range above data range\n            x_index++;\n            ret.push('0');\n        }\n        console.log('GeneratePlotData.getYvalues()');\n        console.log(ret);\n        return ret;\n//        return ['0.571', '0.457', '0.753', '0.872', '0.875', '1.575', '0.64', '0.821', '0.904', '0.862', '0.899', '0.59', '1.026', '0.781', '1.653', '0.643', '0.897', '0.849', '0.418', '0.944', '0.608', '0.974', '0.74', '0.977', '0.412', '0.633', '0.79', '1.302', '0.514', '1.373', '0.461', '0.894', '0.536', '0.727', '0.996', '1.044', '0.685', '0.814', '0.3', '0.917', '1.201', '0.699', '0.705', '0.561', '0.894', '1.415', '1.699', '0.483', '1.263', '1.861', '0.448', '0.442', '0.508', '1.369', '1.054', '1.06', '1.412', '0.417', '0.851', '0.827', '1.463', '0.875', '0.582', '0.672', '0.988', '1.036', '1.547', '0.825', '1.929'].slice(this.xmin-1950, this.xmax-1950);\n    }\n\n\n    getData(){\n        return [this.getTrace1(), this.getTrace2()]\n    }\n\n\n    getTrace1(){\n        return {\n          uid: '1883be', \n          meta: {columnNames: {\n              x: 'Year', \n              y: 'NC'\n            }}, \n          mode: 'lines', \n          name: 'Precip', \n          type: 'histogram', \n          xsrc: 'dmichels:4:3b282f', \n          x: this.getXvalues(), \n          ysrc: 'dmichels:4:060bbe', \n          y: this.getYvalues(), \n          xbins: {\n            end: this.xmax, \n            size: 5, \n            start:this.xmin \n          }, \n          marker: {\n            line: {color: 'rgb(88, 179, 171)'}, \n            color: 'rgb(88, 179, 171)'\n          }, \n          nbinsx: 0, \n          histfunc: 'avg', \n          cumulative: {enabled: false}, \n          transforms: [\n            {\n              meta: {columnNames: {target: 'Year'}}, \n              type: 'filter', \n              value: [this.xmin.toString(), this.xmax.toString()], \n              operation: '[]', \n              targetsrc: 'dmichels:4:3b282f', \n              target: this.getXvalues(), \n            }\n          ], \n          legendgroup: 1, \n          orientation: 'v', \n          hovertemplate: ''\n        };\n}   \n    getTrace2(){\n        return {\n          uid: '5b1527', \n          meta: {columnNames: {\n              x: 'Year', \n              y: 'NC'\n            }}, \n          mode: 'markers+lines', \n          name: 'Annual Precip', \n          type: 'scatter', \n          xsrc: 'dmichels:4:3b282f', \n          x: this.getXvalues(), \n          ysrc: 'dmichels:4:060bbe', \n          y: this.getYvalues(), \n          marker: {color: 'rgb(0, 0, 0)'}, \n          transforms: [\n            {\n              meta: {columnNames: {target: 'Year'}}, \n              type: 'filter', \n              value: [this.xmin.toString(), this.xmax.toString()], \n              operation: '[]', \n              targetsrc: 'dmichels:4:3b282f', \n              target: this.getXvalues() \n            }\n          ]\n        };\n\n    }\n\n    getLayout(){ \n        return {\n          xaxis: {\n            type: 'linear', \n            dtick: 5, \n            range: [this.xmin, this.xmax], \n            tick0: 0, \n            ticks: '', \n            showline: false, \n            tickfont: {family: 'Roboto'}, \n            tickmode: 'linear', \n            autorange: false, \n            tickangle: 90, \n            automargin: true, \n            showspikes: false, \n            tickformat: '', \n            tickprefix: '', \n            rangeslider: {\n              range: [1967.1226295828067, 2020.8773704171933], \n              yaxis: [0, 2.053037694013304], \n              visible: false, \n              autorange: true\n            }, \n            showexponent: 'all', \n            exponentformat: 'none', \n            spikethickness: 4\n          }, \n          yaxis: {\n            type: 'linear', \n            range: [0, 2.053037694013304], \n            ticks: '', \n            autorange: true, \n            showspikes: false\n          }, \n          bargap: 0.28, \n          autosize: true, \n          template: {\n            data: {\n              bar: [\n                {\n                  type: 'bar', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              table: [\n                {\n                  type: 'table', \n                  cells: {\n                    fill: {color: '#EBF0F8'}, \n                    line: {color: 'white'}\n                  }, \n                  header: {\n                    fill: {color: '#C8D4E3'}, \n                    line: {color: 'white'}\n                  }\n                }\n              ], \n              carpet: [\n                {\n                  type: 'carpet', \n                  aaxis: {\n                    gridcolor: '#C8D4E3', \n                    linecolor: '#C8D4E3', \n                    endlinecolor: '#2a3f5f', \n                    minorgridcolor: '#C8D4E3', \n                    startlinecolor: '#2a3f5f'\n                  }, \n                  baxis: {\n                    gridcolor: '#C8D4E3', \n                    linecolor: '#C8D4E3', \n                    endlinecolor: '#2a3f5f', \n                    minorgridcolor: '#C8D4E3', \n                    startlinecolor: '#2a3f5f'\n                  }\n                }\n              ], \n              mesh3d: [\n                {\n                  type: 'mesh3d', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              contour: [\n                {\n                  type: 'contour', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }, \n                  autocolorscale: true\n                }\n              ], \n              heatmap: [\n                {\n                  type: 'heatmap', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }, \n                  autocolorscale: true\n                }\n              ], \n              scatter: [\n                {\n                  type: 'scatter', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              surface: [\n                {\n                  type: 'surface', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              heatmapgl: [\n                {\n                  type: 'heatmapgl', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              histogram: [\n                {\n                  type: 'histogram', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              parcoords: [\n                {\n                  line: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}, \n                  type: 'parcoords'\n                }\n              ], \n              scatter3d: [\n                {\n                  type: 'scatter3d', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              scattergl: [\n                {\n                  type: 'scattergl', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              choropleth: [\n                {\n                  type: 'choropleth', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              scattergeo: [\n                {\n                  type: 'scattergeo', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              histogram2d: [\n                {\n                  type: 'histogram2d', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }, \n                  autocolorscale: true\n                }\n              ], \n              scatterpolar: [\n                {\n                  type: 'scatterpolar', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              contourcarpet: [\n                {\n                  type: 'contourcarpet', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }\n                }\n              ], \n              scattercarpet: [\n                {\n                  type: 'scattercarpet', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              scattermapbox: [\n                {\n                  type: 'scattermapbox', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              scatterpolargl: [\n                {\n                  type: 'scatterpolargl', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              scatterternary: [\n                {\n                  type: 'scatterternary', \n                  marker: {colorbar: {\n                      ticks: '', \n                      outlinewidth: 0\n                    }}\n                }\n              ], \n              histogram2dcontour: [\n                {\n                  type: 'histogram2dcontour', \n                  colorbar: {\n                    ticks: '', \n                    outlinewidth: 0\n                  }, \n                  autocolorscale: true\n                }\n              ]\n            }, \n            layout: {\n              geo: {\n                bgcolor: 'white', \n                showland: true, \n                lakecolor: 'white', \n                landcolor: 'white', \n                showlakes: true, \n                subunitcolor: '#C8D4E3'\n              }, \n              font: {color: '#2a3f5f'}, \n              polar: {\n                bgcolor: 'white', \n                radialaxis: {\n                  ticks: '', \n                  gridcolor: '#EBF0F8', \n                  linecolor: '#EBF0F8'\n                }, \n                angularaxis: {\n                  ticks: '', \n                  gridcolor: '#EBF0F8', \n                  linecolor: '#EBF0F8'\n                }\n              }, \n              scene: {\n                xaxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  gridwidth: 2, \n                  linecolor: '#EBF0F8', \n                  zerolinecolor: '#EBF0F8', \n                  showbackground: true, \n                  backgroundcolor: 'white'\n                }, \n                yaxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  gridwidth: 2, \n                  linecolor: '#EBF0F8', \n                  zerolinecolor: '#EBF0F8', \n                  showbackground: true, \n                  backgroundcolor: 'white'\n                }, \n                zaxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  gridwidth: 2, \n                  linecolor: '#EBF0F8', \n                  zerolinecolor: '#EBF0F8', \n                  showbackground: true, \n                  backgroundcolor: 'white'\n                }\n              }, \n              title: {x: 0.05}, \n              xaxis: {\n                ticks: '', \n                gridcolor: '#EBF0F8', \n                linecolor: '#EBF0F8', \n                automargin: true, \n                zerolinecolor: '#EBF0F8', \n                zerolinewidth: 2\n              }, \n              yaxis: {\n                ticks: '', \n                gridcolor: '#EBF0F8', \n                linecolor: '#EBF0F8', \n                automargin: true, \n                zerolinecolor: '#EBF0F8', \n                zerolinewidth: 2\n              }, \n              ternary: {\n                aaxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  linecolor: '#A2B1C6'\n                }, \n                baxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  linecolor: '#A2B1C6'\n                }, \n                caxis: {\n                  ticks: '', \n                  gridcolor: '#DFE8F3', \n                  linecolor: '#A2B1C6'\n                }, \n                bgcolor: 'white'\n              }, \n              colorway: ['#636efa', '#EF553B', '#00cc96', '#ab63fa', '#19d3f3', '#e763fa', '#fecb52', '#ffa15a', '#ff6692', '#b6e880'], \n              hovermode: 'closest', \n              colorscale: {\n                diverging: [['0', '#8e0152'], ['0.1', '#c51b7d'], ['0.2', '#de77ae'], ['0.3', '#f1b6da'], ['0.4', '#fde0ef'], ['0.5', '#f7f7f7'], ['0.6', '#e6f5d0'], ['0.7', '#b8e186'], ['0.8', '#7fbc41'], ['0.9', '#4d9221'], ['1', '#276419']], \n                sequential: [['0', '#0508b8'], ['0.0893854748603352', '#1910d8'], ['0.1787709497206704', '#3c19f0'], ['0.2681564245810056', '#6b1cfb'], ['0.3575418994413408', '#981cfd'], ['0.44692737430167595', '#bf1cfd'], ['0.5363128491620112', '#dd2bfd'], ['0.6256983240223464', '#f246fe'], ['0.7150837988826816', '#fc67fd'], ['0.8044692737430168', '#fe88fc'], ['0.8938547486033519', '#fea5fd'], ['0.9832402234636871', '#febefe'], ['1', '#fec3fe']], \n                sequentialminus: [['0', '#0508b8'], ['0.0893854748603352', '#1910d8'], ['0.1787709497206704', '#3c19f0'], ['0.2681564245810056', '#6b1cfb'], ['0.3575418994413408', '#981cfd'], ['0.44692737430167595', '#bf1cfd'], ['0.5363128491620112', '#dd2bfd'], ['0.6256983240223464', '#f246fe'], ['0.7150837988826816', '#fc67fd'], ['0.8044692737430168', '#fe88fc'], ['0.8938547486033519', '#fea5fd'], ['0.9832402234636871', '#febefe'], ['1', '#fec3fe']]\n              }, \n              plot_bgcolor: 'white', \n              paper_bgcolor: 'white', \n              shapedefaults: {\n                line: {width: 0}, \n                opacity: 0.4, \n                fillcolor: '#506784'\n              }, \n              annotationdefaults: {\n                arrowhead: 0, \n                arrowcolor: '#506784', \n                arrowwidth: 1\n              }\n            }, \n            themeRef: 'PLOTLY_WHITE'\n          }, \n          bargroupgap: 0, \n          plot_bgcolor: 'rgb(251, 252, 254)', \n          paper_bgcolor: 'rgb(251, 252, 254)'\n        };\n    }\n\n}\n\n\nexport default GeneratePlotData;\n","import React from 'react';\nimport './App.css';\nimport DoubleSlider from './DoubleSlider.js'\nimport PlotRegion from './PlotRegion.js'\nimport GeneratePlotData from './GeneratePlotData.js'\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faChartLine } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faChartLine);\n\n\nconst list_of_regions = [ \"Northeast\",\"Southeast\",\"Midwest\",\"Northern Great Plains\",\n    \"Northwest\",\"Southwest\",\"Southern Great Plains\",\"Alaska\",\"Hawaii\",\"Puerto Rico\" ];\nconst list_of_states = [ \"AL\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\"ID\",\n    \"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\n    \"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\n    \"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\",\"AK\",\n    \"HI\",\"PR\",\"VI\"];\n\nconst axios = require('axios');\n\n\nclass SandboxControls extends React.Component {\n    constructor(props) {\n        super(props)\n        console.log(\"SandboxControls object instantated.\");\n\n\n        this.loadNCAdata();\n\n\n        this.name = \"SandBoxControls\";\n        let w = window.innerWidth - 48;\n        let h = window.innerHeight - 210;\n        this.nca_data_index = {};\n        this.selected_var = \"\";\n        this.plotly_data = [];\n        this.plotly_layout = {};\n        this.plotly_frames = [];\n        this.plotly_config = {}; \n        this.plotly_revision = 0;\n        this.region_sub_select_options  = [];\n        this.region_sub_select_disabled  = true;\n        this.var_select_options  = [];\n        this.var_select_disabled = true;\n        this.state = {\n            plotly_width : w,\n            plotly_height : h,\n            region_select_value: undefined,\n            region_sub_select_value: undefined,\n            var_select_value: undefined,\n            slider_min_value: 1900,\n            slider_max_value: 2018,\n            RobustDatasetCheckboxChecked: false,\n            cached_data: {\n                           xvals: [],\n                           yvals: {},\n                           region: \"\",\n                           varible: \"\",\n                           region_sub: \"\",\n                           _loaded: false\n                         }\n\n        }\n        this.sliderChanged = this.sliderChanged.bind(this);\n        this.RobustDatasetCheckboxChanged = this.RobustDatasetCheckboxChanged.bind(this);\n        this.PlotRegionResize = this.PlotRegionResize.bind(this);\n    }\n\n\n\n    render(){\n        console.log(\"Rendering SandboxControls this.state=\")\n        console.log(this.state)\n        let region_select =  document.getElementById(\"region_select\");\n        let region_select_value = \" -- \";\n        if(region_select && region_select.value !== \"\" && region_select.value !== \"national\"){\n            //region_select_value = region_select.value;\n            // capitalize\n            region_select_value = region_select.value.charAt(0).toUpperCase() + region_select.value.slice(1);\n        }\n\n        // update from state\n        this.populateSubSelect();\n        this.populateVariableSelect();\n        this.updatePlotData();\n\n\n        return (\n            <div className=\"sandbox_controls\">\n                <div className=\"sandbox_header\" >\n                    <FontAwesomeIcon icon={[\"fas\", \"chart-line\"]}\n                        color=\"#666666\"\n                        size=\"2x\"\n                    />\n                    <span>NCA Sandbox - Climate Chart</span>\n                </div>\n                <div className=\"sandbox_selectors\">\n                    <select id=\"region_select\" value={this.loc_select_value} onChange={()=>this.regionSelectChanged()}>\n                        <option className=\"no_select\" value=\"\">Location/Region</option>\n                        <option value=\"national\">National</option>\n                        <option value=\"region\">Regional</option>\n                        <option value=\"state\">State</option>\n                    </select>\n                    <select style={{width: \"170px\"}} id=\"region_sub_select\" value={this.state.region_sub_select_value} disabled={this.region_sub_select_disabled} onChange={()=>this.regionSubSelectChanged()}>\n                        <option className=\"no_select\" value=\"\">{ region_select_value }</option>\n                        {this.region_sub_select_options}\n                    </select>\n                    <select id=\"var_select\" value={this.state.var_select_value} disabled={this.var_select_disabled} onChange={()=>this.variableSelectChanged()}>\n                        <option className=\"no_select\" value=\"\">Climate variable</option>\n                        {this.var_select_options}\n                    </select>\n                    <FormControlLabel\n                        className=\"RobustCheckbox\"\n                        style={{marginLeft: \"0px\"}}\n                        control={\n                          <Checkbox\n                            checked={this.state.RobustDatasetCheckboxChecked}\n                            onChange={this.RobustDatasetCheckboxChanged}\n                            color=\"primary\"\n                          />\n                        }\n                        label='Use Robust Dataset'\n                    />\n\n\n\n                </div>\n                \n                <div className=\"sandbox_slider_outerbox\">\n                    <div className=\"sandbox_slider_center\">\n                        <div className=\"sandbox_slider_left_top\"> Start Year/Period </div>\n                        <div className=\"sandbox_slider_left_bottom\" id=\"start_year\">{this.state.slider_min_value}</div>\n\n                        <div className=\"sandbox_double_slider_container\">\n                            <DoubleSlider \n                                sliderChanged={this.sliderChanged}\n                                min_value={this.state.slider_min_value}\n                                max_value={this.state.slider_max_value}\n                            />\n                        </div>\n\n                        <div className=\"sandbox_slider_right_top\"> End Year/Period </div>\n                        <div className=\"sandbox_slider_right_bottom\" id=\"end_year\">{this.state.slider_max_value}</div>\n                    </div>\n                </div>\n                <PlotRegion\n                    plotly_data={this.plotly_data} \n                    plotly_layout={this.plotly_layout} \n                    plotly_width={this.state.plotly_width} \n                    plotly_height={this.state.plotly_height} \n                    plotly_frames={this.plotly_frames} \n                    plotly_config={this.plotly_config} \n                    plotly_revision={this.plotly_revision}\n                    handleResize={this.PlotRegionResize}\n                />\n\n            </div>\n        );\n    }\n\n\n    populateSubSelect(){      \n\n        if(this.state.region_select_value === \"region\"){\n            let region_options = list_of_regions.map((item,index)=>\n                <option key={\"region_select_options\"+index} value={item}>{item}</option>\n                );\n            console.log('region_options');\n            console.log(region_options);\n            this.region_sub_select_options = region_options;\n            this.region_sub_select_disabled = false;\n        }else if(this.state.region_select_value === \"state\"){\n            let state_options = list_of_states.map((item,index)=>\n                <option key={\"region_select_options\"+index} value={item}>{item}</option>\n                );\n            console.log('state_options');\n            console.log(state_options);\n            this.region_sub_select_options = state_options;\n            this.region_sub_select_disabled = false;\n        }else{\n            this.region_sub_select_options = [];\n            this.region_sub_select_disabled = true;\n        }\n    }\n\n\n    // Put all the options in the 'Climate Varible' selector, based on the 'Location/Region'\n    // selector\n    populateVariableSelect(){\n        let robustData = this.state.RobustDatasetCheckboxChecked;\n        console.log('SanboxControls.populateVariableSelect()');\n        let loc_value = this.state.region_select_value;\n        if(loc_value === \"region\"){ loc_value=\"regions\";} //TODO: fix\n        console.log('loc_value='+loc_value);\n\n        // If we change the dataset, try to keep the same option name selected,\n        // but need to change the value to the value from the corresponding dataset\n        // i.e. \"1 inch\" in the 1900 set, to \"1 inch\" in the 1950 set.\n        let var_select =  document.getElementById(\"var_select\");\n        let var_selected_text = undefined;\n        if(var_select){\n            console.log('var_select.value='+var_select.value);\n            if(this.var_select_value !== \"\"){\n                var_selected_text = var_select[var_select.selectedIndex].innerHTML;\n            }\n            console.log('var_selected_text='+var_selected_text);\n        } \n\n        console.log('nca_data_index=');\n        console.log(this.nca_data_index);\n        let data_subset = this.nca_data_index[loc_value];\n        console.log('data_subset=');\n        console.log(data_subset);\n        let var_select_value = undefined;\n        if(data_subset){\n            // filter out by \"Use Robust Dataset\"\n            let var_select_options = [];\n            for(let i=0;i<data_subset.length;i++){\n\n                let opt = <option key={\"var_select_option\"+i} value={data_subset[i].name}>{data_subset[i].type}</option>\n\n                if( data_subset[i].start === 1950 && robustData ){\n                    var_select_options.push(opt);\n                }else if(data_subset[i].start === 1900 && !robustData ){\n                    var_select_options.push(opt);\n                }else{\n                    console.log(\"Excluding \"+i+\" start=\"+data_subset[i].start);\n                    continue;\n                }\n                if(var_selected_text !== undefined && var_selected_text == data_subset[i].type){\n                    var_select_value = data_subset[i].name;\n                    console.log(\"Found var_select_value=\"+var_select_value+\" var_selected_text=\"+var_selected_text+\" this.state.var_select_value=\"+this.state.var_select_value+\"  i=\"+i);\n\n                }\n\n            }\n            console.log(\"var_select_options=\");\n            console.log(var_select_options);\n            this.var_select_options= var_select_options;\n            this.var_select_disabled= false;\n            // if we changed from 1900 to 1950 (robust) dataset, we need up update var_select_value.\n            // Node, calling setState here can cause an infinite loop.\n            if( this.state.var_select_value !=  var_select_value){\n                console.log(\"Updating var_select_value=\"+var_select_value+\"  this.state.var_select_value=\"+this.state.var_select_value);\n                this.setState({\n                    var_select_value: var_select_value,\n                });\n            }\n        }else{\n            this.var_select_options= [];\n            this.var_select_disabled= true;\n        }\n        \n    }\n\n    // This function loads the 'index.json' file into 'this.nca_data_index'\n    // Then it calls \"this.populateVariableSelect()\"\n    // This is only called when the 'Location/Region' selector is changed\n    // and the json data has not been loaded yet\n    loadNCAdata(){\n        \n        axios.get(\"./TSU_Sandbox_Datafiles/index.json\")\n          .then( (response)=>{\n            // handle success\n            console.log('SanboxControls.loadNCADdata() response='+response);\n            console.log(response);\n            //\n            this.nca_data_index = response.data;\n\n          })\n          .catch((error)=>{\n            // handle error\n            console.log('SanboxControls.loadNCADdata() error='+error);\n          })\n\n    }\n\n    parseNCAFile(data, type, region){\n        let xvals = [];\n        let yvals = [];\n        let lines = data.split(/\\r?\\n/);\n        let headers = lines[0].split(',');\n        console.log('headers='+headers);\n        for(let h=0;h<headers.length;h++){\n            headers[h] = headers[h].trim();\n        }\n        let col_index = undefined;\n        if(type === \"national\"){\n            col_index = 1;\n        }else if(type === \"region\" || type === \"state\"){\n            for(let h=1;h<headers.length;h+=2){\n                if(headers[h] === region){\n                    col_index = h;\n                    break;\n                }\n            }\n        }\n        console.log('region='+region);\n        console.log('col_index='+col_index);\n\n        for(let i=1;i<lines.length;i++){\n            console.log('lines['+i+']='+lines[i]);\n            let elements = lines[i].split(',');\n            //console.log('elements.length='+elements.length);\n            if(elements.length <= 1){\n                break;\n            }\n            let xval = parseInt(elements[0]);\n            let yval = parseFloat(elements[col_index]);\n            //console.log('xval='+xval+' yval='+yval);\n            xvals.push(xval);\n            yvals.push(yval);\n        }\n\n\n        return [xvals, yvals];\n    }\n\n    updatePlotData(){\n        console.log('SanboxControls.updatePlotData()');\n        console.log('region_select='+this.state.region_select_value);\n        console.log('var_select='+this.state.var_select_value);\n        console.log('region_sub_select='+this.state.region_sub_select_value);\n\n\n        if( (this.state.region_select_value === undefined) ||\n            (this.state.var_select_value === undefined) ||\n            ( (this.state.region_select_value == \"region\" ||\n               this.state.region_select_value == \"state\" )\n              && \n              (this.state.region_sub_select_value === undefined ||\n               this.state.region_sub_select_value == \"\")\n            )\n            ){\n            console.log('not plotting');\n            this.plotly_data= [];\n            this.plotly_layout= {};\n            this.plotly_revision= this.plotly_revision+1;\n            if(isNaN(this.plotly_revision)){console.log(\"= ERROR, revision is NaN\");}\n\n\n        }else if( this.state.cached_data._loaded && \n            (this.state.region_select_value === this.state.cached_data.region) &&\n            (this.state.var_select_value === this.state.cached_data.varible) &&\n            (this.state.region_sub_select_value === this.state.cached_data.region_sub) ){\n            // use cached data\n            console.log('Using Cached data');\n            let plot_data = new GeneratePlotData(this.state.cached_data.xvals,\n                                                 this.state.cached_data.yvals);\n            plot_data.setXRange(this.state.slider_min_value, this.state.slider_max_value);\n\n            this.plotly_data = plot_data.getData();\n            this.plotly_layout= plot_data.getLayout();\n            this.plotly_revision= this.plotly_revision+1;\n            if(isNaN(this.plotly_revision)){console.log(\"= ERROR, revision is NaN\");}\n        }else{\n            // fetch .txt data from the server, parse, add to cache\n            //let filename = \"./TSU_Sandbox_Datafiles/national1inch_1900_2018_Sandbox.txt\"\n            let filename = \"./TSU_Sandbox_Datafiles/\"+this.state.var_select_value;\n            console.log('fetching file from server. filename='+filename);\n            axios.get(filename)\n                .then( (response)=>{\n                        console.log('SanboxControls.updatePlotData() response=');\n                        console.log(response);\n                        let xy_values = this.parseNCAFile(response.data, this.state.region_select_value, this.state.region_sub_select_value); \n                        let xvals = xy_values[0];\n                        let yvals = xy_values[1];\n\n                        this.setState((state)=>({\n                            cached_data: {\n                                _loaded: true,\n                                xvals: xvals,\n                                yvals: yvals,\n                                region: state.region_select_value,\n                                varible: state.var_select_value,\n                                region_sub: state.region_sub_select_value\n                            },\n                        }));\n\n                    })\n                .catch( (error)=>{\n                        console.log('SanboxControls.updatePlotData() error='+error)\n                    })\n\n        }\n    }\n\n\n    sliderChanged(values){\n        console.log('SanboxControls.sliderChanged(values='+values+')');\n        if(values.length && values.length === 2){\n            console.log('slider_min_value='+values[0]+' slider_max_value='+values[1]);\n            this.setState({\n                slider_min_value: values[0],\n                slider_max_value: values[1],\n            });\n        }\n\n    }\n\n\n    PlotRegionResize(){\n        let h = window.innerHeight - 210;\n        let w = window.innerWidth - 48;\n        if(window.innerWidth < 949){\n            h -= 29;\n        }\n        console.log(\"SanboxControls.PlotRegionResize() height=\"+h+\" width=\"+w);\n        this.setState((state)=>({\n            plotly_width : w,\n            plotly_height : h,\n        }));\n    }\n\n    RobustDatasetCheckboxChanged(){\n        console.log(\"RobustDatasetCheckboxChanged() this.state.RobustDatasetCheckboxChecked=\"+this.state.RobustDatasetCheckboxChecked);\n        this.setState((state)=>({\n            RobustDatasetCheckboxChecked : ! state.RobustDatasetCheckboxChecked\n        }));\n    }\n\n    // Gets called when 'Location/Region' selector is changed\n    regionSelectChanged(){\n        console.log('SanboxControls.regionSelectChanged()');\n        let region_select =  document.getElementById(\"region_select\");\n\n        this.setState((state)=>({\n            region_select_value: region_select.value,\n            region_sub_select_value: \"\"\n        }));\n    }\n    variableSelectChanged(){\n        console.log('SanboxControls.variableSelectChanged()');\n        let region_select =  document.getElementById(\"region_select\");\n        let var_select =  document.getElementById(\"var_select\");\n        let region_sub_select =  document.getElementById(\"region_sub_select\");\n\n        this.setState((state)=>({\n            var_select_value: var_select.value\n        }));\n\n    }\n\n    // Get called with the 3rd selector is changed\n    regionSubSelectChanged(){\n        console.log('SanboxControls.regionSubSelectChanged()');\n        let region_select =  document.getElementById(\"region_select\");\n        let var_select =  document.getElementById(\"var_select\");\n        let region_sub_select =  document.getElementById(\"region_sub_select\");\n\n        this.setState((state)=>({\n            region_sub_select_value: region_sub_select.value\n        }));\n    }\n\n}\n\nexport default SandboxControls;\n","import React from 'react';\nimport './App.css';\nimport SandboxControls from './SandboxControls.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SandboxControls />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}